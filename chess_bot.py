#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import os
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8386496978:AAGwF7boUT130zV97FrJKhj_lU2jrl12bQQ"  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
WEB_APP_URL = "https://YOUR_USERNAME.github.io/chess-mini-app"  # –ó–∞–º–µ–Ω–∏ YOUR_USERNAME –Ω–∞ —Å–≤–æ–π GitHub username

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows
asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

class ChessBot:
    def __init__(self):
        self.setup_database()
        
    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.conn = sqlite3.connect('chess_stats.db', check_same_thread=False)
        cursor = self.conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                games_played INTEGER DEFAULT 0,
                games_won INTEGER DEFAULT 0,
                total_moves INTEGER DEFAULT 0,
                last_played TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS games (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                difficulty INTEGER,
                result TEXT,
                moves_count INTEGER,
                duration_seconds INTEGER,
                played_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        self.conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.add_user_to_db(user_id, user.username, user.first_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Mini App
        keyboard = [
            [InlineKeyboardButton(
                "‚ôüÔ∏è –ò–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã", 
                web_app=WebAppInfo(url=WEB_APP_URL)
            )],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

‚ôüÔ∏è **–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**
‚Ä¢ 10 —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ AI
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ Telegram
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑

üöÄ **–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!**
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "stats":
            await self.show_stats(query, user_id)
        elif data == "rules":
            await self.show_rules(query)
        elif data == "about":
            await self.show_about(query)
        elif data.startswith("difficulty_"):
            difficulty = int(data.split("_")[1])
            await self.start_game_with_difficulty(query, difficulty)

    async def show_stats(self, query, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = self.get_user_stats(user_id)
        
        if not stats:
            text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!"
        else:
            win_rate = (stats['games_won'] / stats['games_played'] * 100) if stats['games_played'] > 0 else 0
            
            text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['games_played']}
üèÜ –ü–æ–±–µ–¥: {stats['games_won']}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%
‚ôüÔ∏è –í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {stats['total_moves']}

‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: {stats['last_played'] or '–ù–∏–∫–æ–≥–¥–∞'}
            """
        
        keyboard = [
            [InlineKeyboardButton("‚ôüÔ∏è –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=WEB_APP_URL))],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_rules(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —à–∞—Ö–º–∞—Ç"""
        text = """
üìñ **–ü—Ä–∞–≤–∏–ª–∞ —à–∞—Ö–º–∞—Ç:**

üéØ **–¶–µ–ª—å –∏–≥—Ä—ã:**
–ü–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ç –∫–æ—Ä–æ–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

‚ôüÔ∏è **–ö–∞–∫ —Ö–æ–¥—è—Ç —Ñ–∏–≥—É—Ä—ã:**
‚Ä¢ –ü–µ—à–∫–∞: –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –≤–ø–µ—Ä–µ–¥, –±—å–µ—Ç –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
‚Ä¢ –õ–∞–¥—å—è: –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
‚Ä¢ –ö–æ–Ω—å: –±—É–∫–≤–æ–π "–ì"
‚Ä¢ –°–ª–æ–Ω: –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
‚Ä¢ –§–µ—Ä–∑—å: –≤–æ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
‚Ä¢ –ö–æ—Ä–æ–ª—å: –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É

‚ö° **–û—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –†–æ–∫–∏—Ä–æ–≤–∫–∞: –∫–æ—Ä–æ–ª—å + –ª–∞–¥—å—è
‚Ä¢ –í–∑—è—Ç–∏–µ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–µ
‚Ä¢ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—à–∫–∏ –≤ —Ñ–µ—Ä–∑—è

üéÆ **–í –±–æ—Ç–µ:**
‚Ä¢ 10 —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ AI
‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∏–≥—Ä
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ôüÔ∏è –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=WEB_APP_URL))],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_about(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        text = """
‚ÑπÔ∏è **–û –±–æ—Ç–µ:**

ü§ñ **Chess Mini App Bot**
–í–µ—Ä—Å–∏—è: 1.0.0

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –≤ —à–∞—Ö–º–∞—Ç—ã
‚Ä¢ 10 —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ AI
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑

üîß **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ Telegram Mini App API
‚Ä¢ JavaScript + HTML5
‚Ä¢ Python + python-telegram-bot
‚Ä¢ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** AI Assistant
üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** 2025

üöÄ **–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π!**
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ôüÔ∏è –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=WEB_APP_URL))],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App"""
        try:
            data = update.effective_message.web_app_data.data
            game_data = json.loads(data)
            
            user_id = update.effective_user.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
            self.save_game_data(user_id, game_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                "‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üéÆ",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ôüÔ∏è –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", web_app=WebAppInfo(url=WEB_APP_URL))
                ]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Mini App: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")

    def add_user_to_db(self, user_id, username, first_name):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name)
            VALUES (?, ?, ?)
        ''', (user_id, username, first_name))
        self.conn.commit()

    def get_user_stats(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT games_played, games_won, total_moves, last_played
            FROM users WHERE user_id = ?
        ''', (user_id,))
        
        result = cursor.fetchone()
        if result:
            return {
                'games_played': result[0],
                'games_won': result[1],
                'total_moves': result[2],
                'last_played': result[3]
            }
        return None

    def save_game_data(self, user_id, game_data):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã"""
        cursor = self.conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            UPDATE users 
            SET games_played = games_played + 1,
                games_won = games_won + ?,
                total_moves = total_moves + ?,
                last_played = CURRENT_TIMESTAMP
            WHERE user_id = ?
        ''', (
            1 if game_data.get('result') == 'win' else 0,
            game_data.get('moves_count', 0),
            user_id
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∏–≥—Ä–µ
        cursor.execute('''
            INSERT INTO games (user_id, difficulty, result, moves_count, duration_seconds)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            user_id,
            game_data.get('difficulty', 1),
            game_data.get('result', 'unknown'),
            game_data.get('moves_count', 0),
            game_data.get('duration', 0)
        ))
        
        self.conn.commit()

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üéÆ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ôüÔ∏è –ò–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã"
2. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-10)
3. –ò–≥—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ AI!

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å —É—Ä–æ–≤–Ω—è 1-3
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ —Å–≤–æ–∏ –æ—à–∏–±–∫–∏

‚ùì **–ü—Ä–æ–±–ª–µ–º—ã?**
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        stats = self.get_user_stats(user_id)
        
        if not stats:
            text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!"
        else:
            win_rate = (stats['games_won'] / stats['games_played'] * 100) if stats['games_played'] > 0 else 0
            
            text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['games_played']}
üèÜ –ü–æ–±–µ–¥: {stats['games_won']}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%
‚ôüÔ∏è –í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {stats['total_moves']}

‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: {stats['last_played'] or '–ù–∏–∫–æ–≥–¥–∞'}
            """
        
        keyboard = [
            [InlineKeyboardButton("‚ôüÔ∏è –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=WEB_APP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Chess Mini App Bot...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    chess_bot = ChessBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", chess_bot.start))
    application.add_handler(CommandHandler("help", chess_bot.help_command))
    application.add_handler(CommandHandler("stats", chess_bot.stats_command))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, chess_bot.handle_web_app_data))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    from telegram.ext import CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(chess_bot.handle_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(chess_bot.error_handler)
    
    logger.info("‚úÖ Chess Mini App Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üì± –û—Ç–ø—Ä–∞–≤—å /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    import json
    main()
