// üß† GEMINI AI –¥–ª—è —à–∞—Ö–º–∞—Ç - –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è!
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Google Gemini API –¥–ª—è —É–º–Ω—ã—Ö —Ö–æ–¥–æ–≤ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫

class GeminiChessAI {
    constructor() {
        this.apiKey = 'AIzaSyCBBKA-j2q-P0DnOY3AnHoFmUrid31Pi0'; // –¢–≤–æ–π API –∫–ª—é—á Gemini
        this.apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';
        this.difficultyPrompts = {
            1: "–¢—ã –Ω–æ–≤–∏—á–æ–∫ –≤ —à–∞—Ö–º–∞—Ç–∞—Ö. –î–µ–ª–∞–π –ø—Ä–æ—Å—Ç—ã–µ —Ö–æ–¥—ã, –∏–Ω–æ–≥–¥–∞ –æ—à–∏–±–∞–π—Å—è.",
            2: "–¢—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–π –∏–≥—Ä–æ–∫. –ò–∑–±–µ–≥–∞–π –æ—á–µ–≤–∏–¥–Ω—ã—Ö –æ—à–∏–±–æ–∫, –Ω–æ –Ω–µ –¥—É–º–∞–π —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ.",
            3: "–¢—ã –ª—é–±–∏—Ç–µ–ª—å. –î–µ–ª–∞–π —Ä–∞–∑—É–º–Ω—ã–µ —Ö–æ–¥—ã, —Ä–∞–∑–≤–∏–≤–∞–π —Ñ–∏–≥—É—Ä—ã.",
            4: "–¢—ã —Å—Ä–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π —Ü–µ–Ω—Ç—Ä, –∑–∞—â–∏—â–∞–π —Ñ–∏–≥—É—Ä—ã.",
            5: "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫. –ü–ª–∞–Ω–∏—Ä—É–π –Ω–∞ 2-3 —Ö–æ–¥–∞ –≤–ø–µ—Ä–µ–¥.",
            6: "–¢—ã —Å–∏–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫. –ò—â–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
            7: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–∑–∏—Ü–∏—é –≥–ª—É–±–æ–∫–æ.",
            8: "–¢—ã –º–∞—Å—Ç–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.",
            9: "–¢—ã –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä. –ò–≥—Ä–∞–π –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ.",
            10: "–¢—ã —á–µ–º–ø–∏–æ–Ω –º–∏—Ä–∞. –ò–≥—Ä–∞–π –∫–∞–∫ –ª—É—á—à–∏–π –≤ –º–∏—Ä–µ."
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å —É–º–Ω—ã–π —Ö–æ–¥ –æ—Ç Gemini
    async getSmartMove(board, difficulty, isWhite = false) {
        try {
            const prompt = this.createChessPrompt(board, difficulty, isWhite);
            const response = await this.callGeminiAPI(prompt);
            return this.parseChessMove(response);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ Gemini AI:', error);
            return this.getFallbackMove(board, isWhite);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —É–º–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç Gemini
    async getSmartHint(board, difficulty, isWhite = true) {
        try {
            const prompt = this.createHintPrompt(board, difficulty, isWhite);
            const response = await this.callGeminiAPI(prompt);
            return this.parseChessMove(response);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ Gemini –ø–æ–¥—Å–∫–∞–∑–∫–∏:', error);
            return this.getFallbackMove(board, isWhite);
        }
    }

    // –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ö–æ–¥–∞
    createChessPrompt(board, difficulty, isWhite) {
        const color = isWhite ? '–±–µ–ª—ã–µ' : '—á–µ—Ä–Ω—ã–µ';
        const difficultyText = this.difficultyPrompts[difficulty] || this.difficultyPrompts[5];
        
        return `–¢—ã ${color} –∏–≥—Ä–æ–∫ –≤ —à–∞—Ö–º–∞—Ç–∞—Ö. ${difficultyText}

–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:
${this.boardToString(board)}

–î–∞–π –ª—É—á—à–∏–π —Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–æ—Ç–∫—É–¥–∞-–∫—É–¥–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "e2-e4").
–¢–æ–ª—å–∫–æ —Ö–æ–¥, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;
    }

    // –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    createHintPrompt(board, difficulty, isWhite) {
        const difficultyText = this.difficultyPrompts[difficulty] || this.difficultyPrompts[5];
        
        return `–¢—ã —à–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä. ${difficultyText}

–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è (–±–µ–ª—ã–µ —Ö–æ–¥—è—Ç):
${this.boardToString(board)}

–î–∞–π –ª—É—á—à—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–æ—Ç–∫—É–¥–∞-–∫—É–¥–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "e2-e4").
–¢–æ–ª—å–∫–æ —Ö–æ–¥, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;
    }

    // –í—ã–∑–æ–≤ Gemini API
    async callGeminiAPI(prompt) {
        const response = await fetch(`${this.apiUrl}?key=${this.apiKey}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: prompt
                    }]
                }],
                generationConfig: {
                    maxOutputTokens: 50,
                    temperature: 0.7,
                    topP: 0.8,
                    topK: 40
                }
            })
        });

        if (!response.ok) {
            throw new Error(`Gemini API –æ—à–∏–±–∫–∞: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
            return data.candidates[0].content.parts[0].text;
        } else {
            throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Gemini');
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–æ—Å–∫—É –≤ —Å—Ç—Ä–æ–∫—É
    boardToString(board) {
        let result = '  a b c d e f g h\n';
        for (let row = 7; row >= 0; row--) {
            result += `${row + 1} `;
            for (let col = 0; col < 8; col++) {
                const piece = board[row][col];
                if (piece) {
                    result += piece + ' ';
                } else {
                    result += '. ';
                }
            }
            result += `${row + 1}\n`;
        }
        result += '  a b c d e f g h';
        return result;
    }

    // –ü–∞—Ä—Å–∏—Ç—å —Ö–æ–¥ –æ—Ç Gemini
    parseChessMove(response) {
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "e2-e4" –∏–ª–∏ "e2e4"
        const moveMatch = response.match(/([a-h][1-8])[- ]?([a-h][1-8])/i);
        if (moveMatch) {
            const from = moveMatch[1];
            const to = moveMatch[2];
            return this.convertNotationToCoords(from, to);
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
        return null;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞—Ö–º–∞—Ç–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    convertNotationToCoords(from, to) {
        const fromCoords = this.notationToCoords(from);
        const toCoords = this.notationToCoords(to);
        
        if (fromCoords && toCoords) {
            return [fromCoords[0], fromCoords[1], toCoords[0], toCoords[1]];
        }
        return null;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ—Ç–∞—Ü–∏—é –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    notationToCoords(notation) {
        const col = notation.charCodeAt(0) - 97; // a=0, b=1, etc.
        const row = parseInt(notation[1]) - 1; // 1=0, 2=1, etc.
        return [row, col];
    }

    // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ö–æ–¥ –µ—Å–ª–∏ Gemini –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    getFallbackMove(board, isWhite) {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ö–æ–¥–∞
        const moves = this.getAllPossibleMoves(board, isWhite);
        if (moves.length > 0) {
            return moves[Math.floor(Math.random() * moves.length)];
        }
        return null;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
    getAllPossibleMoves(board, isWhite) {
        const moves = [];
        for (let row = 0; row < 8; row++) {
            for (let col = 0; col < 8; col++) {
                const piece = board[row][col];
                if (piece && (piece === piece.toUpperCase()) === isWhite) {
                    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
                    const pieceMoves = this.getPieceMoves(board, row, col, isWhite);
                    moves.push(...pieceMoves);
                }
            }
        }
        return moves;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥—ã —Ñ–∏–≥—É—Ä—ã
    getPieceMoves(board, row, col, isWhite) {
        const moves = [];
        const piece = board[row][col];
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—à–∫–∏
        if (piece.toLowerCase() === 'p') {
            const direction = isWhite ? -1 : 1;
            const startRow = isWhite ? 6 : 1;
            
            // –•–æ–¥ –≤–ø–µ—Ä–µ–¥
            if (row + direction >= 0 && row + direction < 8 && !board[row + direction][col]) {
                moves.push([row, col, row + direction, col]);
            }
            
            // –í–∑—è—Ç–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
            for (const dc of [-1, 1]) {
                const newRow = row + direction;
                const newCol = col + dc;
                if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {
                    const target = board[newRow][newCol];
                    if (target && (target === target.toUpperCase()) !== isWhite) {
                        moves.push([row, col, newRow, newCol]);
                    }
                }
            }
        }
        
        return moves;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.GeminiChessAI = GeminiChessAI;
