// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Web App
    if (tg) {
        tg.ready();
        tg.expand();
        tg.enableClosingConfirmation();
    }
    
    initializeApp();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentScreen = 'mainMenu';
let currentDifficulty = 1;
let gameState = {
    board: [],
    currentPlayer: 'white',
    selectedSquare: null,
    possibleMoves: [],
    gameOver: false,
    winner: null
};

// Gemini AI –¥–ª—è —É–º–Ω—ã—Ö —Ö–æ–¥–æ–≤
let geminiAI = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    setupEventListeners();
    showScreen('mainMenu');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    document.getElementById('playButton').addEventListener('click', () => {
        showScreen('difficultyMenu');
    });
    
    document.getElementById('rulesButton').addEventListener('click', () => {
        showScreen('rulesScreen');
    });
    
    // –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    document.getElementById('backButton').addEventListener('click', () => {
        showScreen('mainMenu');
    });
    
    document.querySelectorAll('.difficulty-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            currentDifficulty = parseInt(e.currentTarget.dataset.level);
            startNewGame();
        });
    });
    
    // –ü—Ä–∞–≤–∏–ª–∞
    document.getElementById('rulesBackButton').addEventListener('click', () => {
        showScreen('mainMenu');
    });
    
    // –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
    document.getElementById('menuButton').addEventListener('click', () => {
        showScreen('mainMenu');
    });
    
    document.getElementById('newGameButton').addEventListener('click', () => {
        startNewGame();
    });
    
    document.getElementById('hintButton').addEventListener('click', () => {
        showHint();
    });
    
    // –≠–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    document.getElementById('playAgainButton').addEventListener('click', () => {
        startNewGame();
    });
    
    document.getElementById('changeDifficultyButton').addEventListener('click', () => {
        showScreen('difficultyMenu');
    });
    
    document.getElementById('mainMenuButton').addEventListener('click', () => {
        showScreen('mainMenu');
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω
function showScreen(screenName) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.menu-screen, .game-screen').forEach(screen => {
        screen.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const screen = document.getElementById(screenName);
    if (screen) {
        screen.classList.remove('hidden');
        currentScreen = screenName;
    }
}

// –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
function startNewGame() {
    initializeBoard();
    createChessBoard();
    gameState.currentPlayer = 'white';
    gameState.selectedSquare = null;
    gameState.possibleMoves = [];
    gameState.gameOver = false;
    gameState.winner = null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini AI
    if (typeof GeminiChessAI !== 'undefined') {
        geminiAI = new GeminiChessAI();
        console.log('üß† Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–º–Ω—ã—Ö —Ö–æ–¥–æ–≤!');
    } else {
        console.warn('‚ö†Ô∏è Gemini AI –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π AI');
    }
    
    updateGameInfo();
    showScreen('gameScreen');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
function initializeBoard() {
    gameState.board = [
        ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
        ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
        ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
    ];
}

// –°–æ–∑–¥–∞–Ω–∏–µ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è
function createChessBoard() {
    const board = document.getElementById('chessBoard');
    if (!board) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç chessBoard –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É
    board.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ—Å–∫–∏ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
    const boardContainer = document.createElement('div');
    boardContainer.className = 'chess-board-container';
    
    // –°–æ–∑–¥–∞–µ–º —Å–∞–º—É –¥–æ—Å–∫—É
    const boardGrid = document.createElement('div');
    boardGrid.className = 'chess-board';
    
    for (let row = 0; row < 8; row++) {
        for (let col = 0; col < 8; col++) {
            const square = document.createElement('div');
            square.className = 'chess-square';
            square.dataset.row = row;
            square.dataset.col = col;
            
            // –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
            if ((row + col) % 2 === 0) {
                square.classList.add('light');
            } else {
                square.classList.add('dark');
            }
            
                   // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ú–ò —Å—Ç–∏–ª—è–º–∏
                   const piece = gameState.board[row][col];
                   if (piece) {
                       const pieceElement = document.createElement('div');
                       pieceElement.className = 'chess-piece';
                       pieceElement.textContent = getPieceSymbol(piece);
                       
                       // –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ï —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                       pieceElement.style.fontSize = '2rem';
                       pieceElement.style.fontWeight = '900';
                       pieceElement.style.fontFamily = 'Arial, sans-serif';
                       pieceElement.style.lineHeight = '1';
                       pieceElement.style.display = 'flex';
                       pieceElement.style.alignItems = 'center';
                       pieceElement.style.justifyContent = 'center';
                       pieceElement.style.width = '100%';
                       pieceElement.style.height = '100%';
                       pieceElement.style.contain = 'layout';
                       pieceElement.style.transform = 'none';
                       pieceElement.style.willChange = 'auto';
                       pieceElement.style.backfaceVisibility = 'visible';
                       pieceElement.style.perspective = 'none';
                       pieceElement.style.transformStyle = 'flat';
                       pieceElement.style.isolation = 'isolate';
                       
                       // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç—Ä–∞—Å—Ç –¥–ª—è —Ñ–∏–≥—É—Ä
                       if (piece === piece.toUpperCase()) {
                           // –ë–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã - –ß–ò–°–¢–û –ë–ï–õ–´–ï —Å —á–µ—Ä–Ω–æ–π –æ–±–≤–æ–¥–∫–æ–π
                           pieceElement.style.color = '#ffffff';
                           pieceElement.style.textShadow = '2px 2px 0 #000000, -2px -2px 0 #000000, 2px -2px 0 #000000, -2px 2px 0 #000000, 0 2px 0 #000000, 0 -2px 0 #000000, 2px 0 0 #000000, -2px 0 0 #000000';
                       } else {
                           // –ß–µ—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã - –ß–ò–°–¢–û –ß–ï–†–ù–´–ï —Å –±–µ–ª–æ–π –æ–±–≤–æ–¥–∫–æ–π
                           pieceElement.style.color = '#000000';
                           pieceElement.style.textShadow = '2px 2px 0 #ffffff, -2px -2px 0 #ffffff, 2px -2px 0 #ffffff, -2px 2px 0 #ffffff, 0 2px 0 #ffffff, 0 -2px 0 #ffffff, 2px 0 0 #ffffff, -2px 0 0 #ffffff';
                       }
                       
                       square.appendChild(pieceElement);
                   }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
            square.addEventListener('click', () => handleSquareClick(row, col));
            
            boardGrid.appendChild(square);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –ø–æ–ª—è
    addBoardCoordinates(boardGrid);
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
    boardContainer.appendChild(boardGrid);
    board.appendChild(boardContainer);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –¥–æ—Å–∫—É - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è
function addBoardCoordinates(boardGrid) {
    // –ë—É–∫–≤—ã (a-h) —Å–Ω–∏–∑—É
    const letters = document.createElement('div');
    letters.className = 'chess-coordinates letters';
    letters.style.position = 'absolute';
    letters.style.bottom = '-40px';
    letters.style.left = '0';
    letters.style.right = '0';
    letters.style.display = 'flex';
    letters.style.justifyContent = 'space-between';
    letters.style.padding = '0 15px';
    letters.style.height = '30px';
    letters.style.zIndex = '9999';
    letters.style.fontSize = '20px';
    letters.style.fontWeight = '900';
    letters.style.color = '#000000';
    letters.style.background = '#ffffff';
    letters.style.border = '3px solid #000000';
    letters.style.borderRadius = '8px';
    letters.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.7)';
    letters.style.textShadow = '2px 2px 4px rgba(0, 0, 0, 0.5)';
    letters.style.fontFamily = 'Arial, sans-serif';
    
    for (let i = 0; i < 8; i++) {
        const letter = document.createElement('span');
        letter.textContent = String.fromCharCode(97 + i); // a-h
        letter.style.padding = '4px 6px';
        letters.appendChild(letter);
    }
    boardGrid.appendChild(letters);
    
    // –¶–∏—Ñ—Ä—ã (1-8) —Å–ª–µ–≤–∞
    const numbers = document.createElement('div');
    numbers.className = 'chess-coordinates numbers';
    numbers.style.position = 'absolute';
    numbers.style.top = '0';
    numbers.style.bottom = '0';
    numbers.style.left = '-40px';
    numbers.style.display = 'flex';
    numbers.style.flexDirection = 'column';
    numbers.style.justifyContent = 'space-between';
    numbers.style.padding = '15px 0';
    numbers.style.width = '30px';
    numbers.style.zIndex = '9999';
    numbers.style.fontSize = '20px';
    numbers.style.fontWeight = '900';
    numbers.style.color = '#000000';
    numbers.style.background = '#ffffff';
    numbers.style.border = '3px solid #000000';
    numbers.style.borderRadius = '8px';
    numbers.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.7)';
    numbers.style.textShadow = '2px 2px 4px rgba(0, 0, 0, 0.5)';
    numbers.style.fontFamily = 'Arial, sans-serif';
    
    for (let i = 8; i >= 1; i--) {
        const number = document.createElement('span');
        number.textContent = i.toString();
        number.style.padding = '4px 6px';
        numbers.appendChild(number);
    }
    boardGrid.appendChild(numbers);
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª —Ñ–∏–≥—É—Ä—ã - –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è
function getPieceSymbol(piece) {
    // –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ï —Å–∏–º–≤–æ–ª—ã –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const symbols = {
        'K': '‚ôî', 'Q': '‚ôï', 'R': '‚ôñ', 'B': '‚ôó', 'N': '‚ôò', 'P': '‚ôô',
        'k': '‚ôö', 'q': '‚ôõ', 'r': '‚ôú', 'b': '‚ôù', 'n': '‚ôû', 'p': '‚ôü'
    };
    return symbols[piece] || '';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
function handleSquareClick(row, col) {
    if (gameState.gameOver || gameState.currentPlayer !== 'white') {
        return;
    }
    
    const piece = gameState.board[row][col];
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–ª–µ—Ç–∫–∞ —Å —Ñ–∏–≥—É—Ä–æ–π –∏–≥—Ä–æ–∫–∞
    if (piece && piece === piece.toUpperCase()) {
        selectSquare(row, col);
    }
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ –∏–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    else if (gameState.selectedSquare) {
        const [selectedRow, selectedCol] = gameState.selectedSquare;
        const isPossibleMove = gameState.possibleMoves.some(move => 
            move[0] === row && move[1] === col
        );
        
        if (isPossibleMove) {
            makeMove(selectedRow, selectedCol, row, col);
        }
        
        clearSelection();
    }
}

// –í—ã–±—Ä–∞—Ç—å –∫–ª–µ—Ç–∫—É - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
function selectSquare(row, col) {
    clearSelection();
    
    gameState.selectedSquare = [row, col];
    gameState.possibleMoves = getPossibleMoves(row, col);
    
    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    const square = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
    if (square) {
        square.classList.add('selected');
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
    gameState.possibleMoves.forEach(([moveRow, moveCol]) => {
        const moveSquare = document.querySelector(`[data-row="${moveRow}"][data-col="${moveCol}"]`);
        if (moveSquare) {
            if (gameState.board[moveRow][moveCol]) {
                moveSquare.classList.add('possible-capture');
            } else {
                moveSquare.classList.add('possible-move');
            }
        }
    });
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
function clearSelection() {
    gameState.selectedSquare = null;
    gameState.possibleMoves = [];
    
    // –£–±—Ä–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    document.querySelectorAll('.chess-square').forEach(square => {
        square.classList.remove('selected', 'possible-move', 'possible-capture');
    });
}

// –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —Ñ–∏–≥—É—Ä—ã
function getPossibleMoves(row, col) {
    const piece = gameState.board[row][col];
    const moves = [];
    
    if (!piece) return moves;
    
    const isWhite = piece === piece.toUpperCase();
    
    switch (piece.toLowerCase()) {
        case 'p': // –ü–µ—à–∫–∞
            moves.push(...getPawnMoves(row, col, isWhite));
            break;
        case 'r': // –õ–∞–¥—å—è
            moves.push(...getRookMoves(row, col, isWhite));
            break;
        case 'n': // –ö–æ–Ω—å
            moves.push(...getKnightMoves(row, col, isWhite));
            break;
        case 'b': // –°–ª–æ–Ω
            moves.push(...getBishopMoves(row, col, isWhite));
            break;
        case 'q': // –§–µ—Ä–∑—å
            moves.push(...getQueenMoves(row, col, isWhite));
            break;
        case 'k': // –ö–æ—Ä–æ–ª—å
            moves.push(...getKingMoves(row, col, isWhite));
            break;
    }
    
    return moves;
}

// –•–æ–¥—ã –ø–µ—à–∫–∏
function getPawnMoves(row, col, isWhite) {
    const moves = [];
    const direction = isWhite ? -1 : 1;
    const startRow = isWhite ? 6 : 1;
    
    // –•–æ–¥ –≤–ø–µ—Ä–µ–¥
    if (isValidSquare(row + direction, col) && !gameState.board[row + direction][col]) {
        moves.push([row + direction, col]);
        
        // –î–≤–æ–π–Ω–æ–π —Ö–æ–¥ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if (row === startRow && !gameState.board[row + 2 * direction][col]) {
            moves.push([row + 2 * direction, col]);
        }
    }
    
    // –í–∑—è—Ç–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    [-1, 1].forEach(dc => {
        const newRow = row + direction;
        const newCol = col + dc;
        if (isValidSquare(newRow, newCol)) {
            const targetPiece = gameState.board[newRow][newCol];
            if (targetPiece && (targetPiece === targetPiece.toUpperCase()) !== isWhite) {
                moves.push([newRow, newCol]);
            }
        }
    });
    
    return moves;
}

// –•–æ–¥—ã –ª–∞–¥—å–∏
function getRookMoves(row, col, isWhite) {
    const moves = [];
    const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];
    
    directions.forEach(([dr, dc]) => {
        for (let i = 1; i < 8; i++) {
            const newRow = row + dr * i;
            const newCol = col + dc * i;
            
            if (!isValidSquare(newRow, newCol)) break;
            
            const piece = gameState.board[newRow][newCol];
            if (!piece) {
                moves.push([newRow, newCol]);
            } else {
                if ((piece === piece.toUpperCase()) !== isWhite) {
                    moves.push([newRow, newCol]);
                }
                break;
            }
        }
    });
    
    return moves;
}

// –•–æ–¥—ã –∫–æ–Ω—è
function getKnightMoves(row, col, isWhite) {
    const moves = [];
    const knightMoves = [
        [-2, -1], [-2, 1], [-1, -2], [-1, 2],
        [1, -2], [1, 2], [2, -1], [2, 1]
    ];
    
    knightMoves.forEach(([dr, dc]) => {
        const newRow = row + dr;
        const newCol = col + dc;
        
        if (isValidSquare(newRow, newCol)) {
            const piece = gameState.board[newRow][newCol];
            if (!piece || (piece === piece.toUpperCase()) !== isWhite) {
                moves.push([newRow, newCol]);
            }
        }
    });
    
    return moves;
}

// –•–æ–¥—ã —Å–ª–æ–Ω–∞
function getBishopMoves(row, col, isWhite) {
    const moves = [];
    const directions = [[-1, -1], [-1, 1], [1, -1], [1, 1]];
    
    directions.forEach(([dr, dc]) => {
        for (let i = 1; i < 8; i++) {
            const newRow = row + dr * i;
            const newCol = col + dc * i;
            
            if (!isValidSquare(newRow, newCol)) break;
            
            const piece = gameState.board[newRow][newCol];
            if (!piece) {
                moves.push([newRow, newCol]);
            } else {
                if ((piece === piece.toUpperCase()) !== isWhite) {
                    moves.push([newRow, newCol]);
                }
                break;
            }
        }
    });
    
    return moves;
}

// –•–æ–¥—ã —Ñ–µ—Ä–∑—è
function getQueenMoves(row, col, isWhite) {
    return [
        ...getRookMoves(row, col, isWhite),
        ...getBishopMoves(row, col, isWhite)
    ];
}

// –•–æ–¥—ã –∫–æ—Ä–æ–ª—è
function getKingMoves(row, col, isWhite) {
    const moves = [];
    const directions = [
        [-1, -1], [-1, 0], [-1, 1],
        [0, -1],           [0, 1],
        [1, -1],  [1, 0],  [1, 1]
    ];
    
    directions.forEach(([dr, dc]) => {
        const newRow = row + dr;
        const newCol = col + dc;
        
        if (isValidSquare(newRow, newCol)) {
            const piece = gameState.board[newRow][newCol];
            if (!piece || (piece === piece.toUpperCase()) !== isWhite) {
                moves.push([newRow, newCol]);
            }
        }
    });
    
    return moves;
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª–µ—Ç–∫–∏
function isValidSquare(row, col) {
    return row >= 0 && row < 8 && col >= 0 && col < 8;
}

// –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
function makeMove(fromRow, fromCol, toRow, toCol) {
    const piece = gameState.board[fromRow][fromCol];
    gameState.board[toRow][toCol] = piece;
    gameState.board[fromRow][fromCol] = '';
    
    // –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å–∫—É
    createChessBoard();
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
    if (checkGameOver()) {
        showGameOver();
        return;
    }
    
    // –ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥ AI
    gameState.currentPlayer = 'black';
    updateGameInfo();
    
    // –•–æ–¥ AI —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
        if (!gameState.gameOver) {
            makeAIMove();
        }
    }, 500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
}

// –•–æ–¥ AI - GEMINI –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è
async function makeAIMove() {
    if (gameState.gameOver) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showAILoading();
    
    try {
        let bestMove = null;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini AI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (geminiAI) {
            console.log('üß† –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—ã–π —Ö–æ–¥ –æ—Ç Gemini AI...');
            bestMove = await geminiAI.getSmartMove(gameState.board, currentDifficulty, false);
            console.log('üéØ Gemini AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ö–æ–¥:', bestMove);
        }
        
        // –ï—Å–ª–∏ Gemini –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π AI
        if (!bestMove) {
            console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π AI –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤');
            bestMove = getBestMove();
        }
        
        if (bestMove) {
            const [fromRow, fromCol, toRow, toCol] = bestMove;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ AI
            const piece = gameState.board[fromRow][fromCol];
            gameState.board[toRow][toCol] = piece;
            gameState.board[fromRow][fromCol] = '';
            
            // –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å–∫—É
            createChessBoard();
            
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
            if (checkGameOver()) {
                showGameOver();
                hideAILoading();
                return;
            }
        }
        
        // –ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –∏–≥—Ä–æ–∫—É
        gameState.currentPlayer = 'white';
        updateGameInfo();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Gemini AI:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π AI –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        const bestMove = getBestMove();
        if (bestMove) {
            const [fromRow, fromCol, toRow, toCol] = bestMove;
            const piece = gameState.board[fromRow][fromCol];
            gameState.board[toRow][toCol] = piece;
            gameState.board[fromRow][fromCol] = '';
            createChessBoard();
            if (checkGameOver()) {
                showGameOver();
                hideAILoading();
                return;
            }
        }
        gameState.currentPlayer = 'white';
        updateGameInfo();
    }
    
    hideAILoading();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ AI
function showAILoading() {
    const statusElement = document.getElementById('game-status');
    if (statusElement) {
        statusElement.textContent = 'ü§ñ AI –¥—É–º–∞–µ—Ç...';
        statusElement.style.color = '#ff6b6b';
    }
}

// –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ AI
function hideAILoading() {
    const statusElement = document.getElementById('game-status');
    if (statusElement) {
        statusElement.textContent = '–ò–≥—Ä–∞ –∏–¥–µ—Ç';
        statusElement.style.color = '#4ecdc4';
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ö–æ–¥ AI - –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –£–ú–ù–ê–Ø –≤–µ—Ä—Å–∏—è
function getBestMove() {
    const moves = getAllPossibleMoves('black');
    if (moves.length === 0) return null;
    
    // –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    switch (currentDifficulty) {
        case 1: // –ù–æ–≤–∏—á–æ–∫ - —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
            return moves[Math.floor(Math.random() * moves.length)];
        case 2: // –õ–µ–≥–∫–∏–π - –∏–∑–±–µ–≥–∞–µ—Ç –ø–æ—Ç–µ—Ä–∏ —Ñ–∏–≥—É—Ä
            return getRandomSafeMove(moves);
        case 3: // –ü—Ä–æ—Å—Ç–æ–π - –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤–∑—è—Ç–∏–µ
            return getCaptureMove(moves) || getRandomSafeMove(moves);
        case 4: // –°—Ä–µ–¥–Ω–∏–π - –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            return getSuperStrategicMove(moves, 1);
        case 5: // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π - —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            return getSuperStrategicMove(moves, 2);
        case 6: // –°–ª–æ–∂–Ω—ã–π - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            return getSuperStrategicMove(moves, 3);
        case 7: // –¢—Ä—É–¥–Ω—ã–π - —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            return getSuperStrategicMove(moves, 4);
        case 8: // –≠–∫—Å–ø–µ—Ä—Ç - –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            return getSuperStrategicMove(moves, 5);
        case 9: // –ú–∞—Å—Ç–µ—Ä - –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            return getSuperStrategicMove(moves, 6);
        case 10: // –ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            return getSuperStrategicMove(moves, 7);
        default:
            return moves[Math.floor(Math.random() * moves.length)];
    }
}

// –£–ú–ù–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û —É–ª—É—á—à–µ–Ω–Ω–∞—è
function getStrategicMove(moves, depth) {
    if (moves.length === 0) return null;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ö–æ–¥–æ–≤
    const priorities = [];
    
    for (const move of moves) {
        let score = 0;
        const [fromRow, fromCol, toRow, toCol] = move;
        const piece = gameState.board[fromRow][fromCol];
        const targetPiece = gameState.board[toRow][toCol];
        
        // 1. –í–∑—è—Ç–∏–µ —Ñ–∏–≥—É—Ä (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if (targetPiece) {
            score += getPieceValue(targetPiece) * 200; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }
        
        // 2. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–≤–∞–∂–Ω–µ–µ)
        if ((toRow >= 3 && toRow <= 4) && (toCol >= 3 && toCol <= 4)) {
            score += 50; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }
        
        // 3. –†–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–≥—É—Ä (—É–º–Ω–µ–µ)
        if (piece === 'N' && toRow >= 2) { // –ö–æ–Ω—å –≤–ø–µ—Ä–µ–¥
            score += 30;
        }
        if (piece === 'B' && toRow >= 2) { // –°–ª–æ–Ω –≤–ø–µ—Ä–µ–¥
            score += 25;
        }
        if (piece === 'Q' && toRow >= 2) { // –§–µ—Ä–∑—å –≤–ø–µ—Ä–µ–¥
            score += 20;
        }
        
        // 4. –†–æ–∫–∏—Ä–æ–≤–∫–∞ (–≤–∞–∂–Ω–µ–µ)
        if (piece === 'K' && Math.abs(toCol - fromCol) === 2) {
            score += 100; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }
        
        // 5. –ê—Ç–∞–∫–∞ –Ω–∞ –∫–æ—Ä–æ–ª—è (–∫—Ä–∏—Ç–∏—á–Ω–æ)
        if (targetPiece === 'K') {
            score += 10000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }
        
        // 6. –ó–∞—â–∏—Ç–∞ —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä (–≤–∞–∂–Ω–µ–µ)
        if (isPieceUnderAttack(toRow, toCol, 'black')) {
            score += 100; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }
        
        // 7. –ù–û–í–û–ï: –ê—Ç–∞–∫–∞ –Ω–∞ —Ñ–µ—Ä–∑—è
        if (targetPiece === 'Q') {
            score += 2000;
        }
        
        // 8. –ù–û–í–û–ï: –ê—Ç–∞–∫–∞ –Ω–∞ –ª–∞–¥—å—é
        if (targetPiece === 'R') {
            score += 1000;
        }
        
        // 9. –ù–û–í–û–ï: –ê—Ç–∞–∫–∞ –Ω–∞ —Å–ª–æ–Ω–∞/–∫–æ–Ω—è
        if (targetPiece === 'B' || targetPiece === 'N') {
            score += 500;
        }
        
        // 10. –ù–û–í–û–ï: –ò–∑–±–µ–≥–∞–µ–º –ø–æ—Ç–µ—Ä–∏ —Ñ–∏–≥—É—Ä
        if (isPieceUnderAttack(fromRow, fromCol, 'black')) {
            score += 150; // –°–ø–∞—Å–∞–µ–º —Ñ–∏–≥—É—Ä—É
        }
        
        priorities.push({ move, score });
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    priorities.sort((a, b) => b.score - a.score);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π —Ö–æ–¥ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ —Ç–æ–ø-2 (—É–º–µ–Ω—å—à–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å)
    const topMoves = priorities.slice(0, Math.min(2, priorities.length));
    return topMoves[Math.floor(Math.random() * topMoves.length)].move;
}

// –°–£–ü–ï–† —É–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û —É–ª—É—á—à–µ–Ω–Ω–∞—è
function getSuperStrategicMove(moves, depth) {
    if (moves.length === 0) return null;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ö–æ–¥–æ–≤ —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
    const priorities = [];
    
    for (const move of moves) {
        let score = 0;
        const [fromRow, fromCol, toRow, toCol] = move;
        const piece = gameState.board[fromRow][fromCol];
        const targetPiece = gameState.board[toRow][toCol];
        
        // 1. –í–∑—è—Ç–∏–µ —Ñ–∏–≥—É—Ä (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if (targetPiece) {
            score += getPieceValue(targetPiece) * 500; // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –≤ 2.5 —Ä–∞–∑–∞
        }
        
        // 2. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–ö–†–ò–¢–ò–ß–ù–û)
        if ((toRow >= 3 && toRow <= 4) && (toCol >= 3 && toCol <= 4)) {
            score += 100; // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –≤ 2 —Ä–∞–∑–∞
        }
        
        // 3. –†–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–≥—É—Ä (–£–ú–ù–ï–ï)
        if (piece === 'N' && toRow >= 2) { // –ö–æ–Ω—å –≤–ø–µ—Ä–µ–¥
            score += 50;
        }
        if (piece === 'B' && toRow >= 2) { // –°–ª–æ–Ω –≤–ø–µ—Ä–µ–¥
            score += 45;
        }
        if (piece === 'Q' && toRow >= 2) { // –§–µ—Ä–∑—å –≤–ø–µ—Ä–µ–¥
            score += 40;
        }
        if (piece === 'R' && toRow >= 2) { // –õ–∞–¥—å—è –≤–ø–µ—Ä–µ–¥
            score += 35;
        }
        
        // 4. –†–æ–∫–∏—Ä–æ–≤–∫–∞ (–ö–†–ò–¢–ò–ß–ù–û)
        if (piece === 'K' && Math.abs(toCol - fromCol) === 2) {
            score += 200; // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –≤ 2 —Ä–∞–∑–∞
        }
        
        // 5. –ê—Ç–∞–∫–∞ –Ω–∞ –∫–æ—Ä–æ–ª—è (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û)
        if (targetPiece === 'K') {
            score += 50000; // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –≤ 5 —Ä–∞–∑
        }
        
        // 6. –ó–∞—â–∏—Ç–∞ —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä (–ö–†–ò–¢–ò–ß–ù–û)
        if (isPieceUnderAttack(toRow, toCol, 'black')) {
            score += 200; // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –≤ 2 —Ä–∞–∑–∞
        }
        
        // 7. –ê—Ç–∞–∫–∞ –Ω–∞ —Ñ–µ—Ä–∑—è (–ö–†–ò–¢–ò–ß–ù–û)
        if (targetPiece === 'Q') {
            score += 5000; // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –≤ 2.5 —Ä–∞–∑–∞
        }
        
        // 8. –ê—Ç–∞–∫–∞ –Ω–∞ –ª–∞–¥—å—é (–í–ê–ñ–ù–û)
        if (targetPiece === 'R') {
            score += 2500; // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –≤ 2.5 —Ä–∞–∑–∞
        }
        
        // 9. –ê—Ç–∞–∫–∞ –Ω–∞ —Å–ª–æ–Ω–∞/–∫–æ–Ω—è (–í–ê–ñ–ù–û)
        if (targetPiece === 'B' || targetPiece === 'N') {
            score += 1250; // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –≤ 2.5 —Ä–∞–∑–∞
        }
        
        // 10. –°–ø–∞—Å–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä (–ö–†–ò–¢–ò–ß–ù–û)
        if (isPieceUnderAttack(fromRow, fromCol, 'black')) {
            score += 300; // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –≤ 2 —Ä–∞–∑–∞
        }
        
        // 11. –ù–û–í–û–ï: –ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞
        if ((toRow >= 2 && toRow <= 5) && (toCol >= 2 && toCol <= 5)) {
            score += 25;
        }
        
        // 12. –ù–û–í–û–ï: –ê—Ç–∞–∫–∞ –Ω–∞ –ø–µ—à–∫–∏
        if (targetPiece === 'P') {
            score += 100;
        }
        
        // 13. –ù–û–í–û–ï: –ò–∑–±–µ–≥–∞–µ–º —Ö–æ–¥–æ–≤ –≤ —É–≥–æ–ª
        if ((toRow === 0 || toRow === 7) && (toCol === 0 || toCol === 7)) {
            score -= 50;
        }
        
        // 14. –ù–û–í–û–ï: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ö–æ–¥—ã –≤–ø–µ—Ä–µ–¥
        if (toRow > fromRow) {
            score += 20;
        }
        
        priorities.push({ move, score });
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    priorities.sort((a, b) => b.score - a.score);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û –ª—É—á—à–∏–π —Ö–æ–¥ (—É–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å)
    return priorities[0].move;
}

// –°–£–ü–ï–† —É–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –±–µ–ª—ã—Ö
function getSuperBestMoveForWhite(moves) {
    if (moves.length === 0) return null;
    
    const priorities = [];
    
    for (const move of moves) {
        let score = 0;
        const [fromRow, fromCol, toRow, toCol] = move;
        const piece = gameState.board[fromRow][fromCol];
        const targetPiece = gameState.board[toRow][toCol];
        
        // 1. –í–∑—è—Ç–∏–µ —Ñ–∏–≥—É—Ä (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if (targetPiece) {
            score += getPieceValue(targetPiece) * 500;
        }
        
        // 2. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–ö–†–ò–¢–ò–ß–ù–û)
        if ((toRow >= 3 && toRow <= 4) && (toCol >= 3 && toCol <= 4)) {
            score += 100;
        }
        
        // 3. –†–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–≥—É—Ä (–£–ú–ù–ï–ï)
        if (piece === 'N' && toRow <= 5) { // –ö–æ–Ω—å –≤–ø–µ—Ä–µ–¥
            score += 50;
        }
        if (piece === 'B' && toRow <= 5) { // –°–ª–æ–Ω –≤–ø–µ—Ä–µ–¥
            score += 45;
        }
        if (piece === 'Q' && toRow <= 5) { // –§–µ—Ä–∑—å –≤–ø–µ—Ä–µ–¥
            score += 40;
        }
        if (piece === 'R' && toRow <= 5) { // –õ–∞–¥—å—è –≤–ø–µ—Ä–µ–¥
            score += 35;
        }
        
        // 4. –†–æ–∫–∏—Ä–æ–≤–∫–∞ (–ö–†–ò–¢–ò–ß–ù–û)
        if (piece === 'K' && Math.abs(toCol - fromCol) === 2) {
            score += 200;
        }
        
        // 5. –ê—Ç–∞–∫–∞ –Ω–∞ –∫–æ—Ä–æ–ª—è (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û)
        if (targetPiece === 'k') {
            score += 50000;
        }
        
        // 6. –ó–∞—â–∏—Ç–∞ —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä (–ö–†–ò–¢–ò–ß–ù–û)
        if (isPieceUnderAttack(toRow, toCol, 'white')) {
            score += 200;
        }
        
        // 7. –ê—Ç–∞–∫–∞ –Ω–∞ —Ñ–µ—Ä–∑—è (–ö–†–ò–¢–ò–ß–ù–û)
        if (targetPiece === 'q') {
            score += 5000;
        }
        
        // 8. –ê—Ç–∞–∫–∞ –Ω–∞ –ª–∞–¥—å—é (–í–ê–ñ–ù–û)
        if (targetPiece === 'r') {
            score += 2500;
        }
        
        // 9. –ê—Ç–∞–∫–∞ –Ω–∞ —Å–ª–æ–Ω–∞/–∫–æ–Ω—è (–í–ê–ñ–ù–û)
        if (targetPiece === 'b' || targetPiece === 'n') {
            score += 1250;
        }
        
        // 10. –°–ø–∞—Å–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä (–ö–†–ò–¢–ò–ß–ù–û)
        if (isPieceUnderAttack(fromRow, fromCol, 'white')) {
            score += 300;
        }
        
        // 11. –ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞
        if ((toRow >= 2 && toRow <= 5) && (toCol >= 2 && toCol <= 5)) {
            score += 25;
        }
        
        // 12. –ê—Ç–∞–∫–∞ –Ω–∞ –ø–µ—à–∫–∏
        if (targetPiece === 'p') {
            score += 100;
        }
        
        // 13. –ò–∑–±–µ–≥–∞–µ–º —Ö–æ–¥–æ–≤ –≤ —É–≥–æ–ª
        if ((toRow === 0 || toRow === 7) && (toCol === 0 || toCol === 7)) {
            score -= 50;
        }
        
        // 14. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ö–æ–¥—ã –≤–ø–µ—Ä–µ–¥
        if (toRow < fromRow) {
            score += 20;
        }
        
        priorities.push({ move, score });
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    priorities.sort((a, b) => b.score - a.score);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û –ª—É—á—à–∏–π —Ö–æ–¥
    return priorities[0].move;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∏–≥—É—Ä—ã
function getPieceValue(piece) {
    const values = {
        'P': 1, 'p': 1,
        'N': 3, 'n': 3,
        'B': 3, 'b': 3,
        'R': 5, 'r': 5,
        'Q': 9, 'q': 9,
        'K': 100, 'k': 100
    };
    return values[piece] || 0;
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞—Ç–∞–∫–æ–≤–∞–Ω–∞ –ª–∏ —Ñ–∏–≥—É—Ä–∞
function isPieceUnderAttack(row, col, color) {
    const isWhite = color === 'white';
    const opponentColor = isWhite ? 'black' : 'white';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç–∞–∫–∏ –æ—Ç –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    for (let r = 0; r < 8; r++) {
        for (let c = 0; c < 8; c++) {
            const piece = gameState.board[r][c];
            if (piece && (piece === piece.toUpperCase()) !== isWhite) {
                const moves = getPossibleMoves(r, c);
                if (moves.some(([toRow, toCol]) => toRow === row && toCol === col)) {
                    return true;
                }
            }
        }
    }
    return false;
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —Ü–≤–µ—Ç–∞
function getAllPossibleMoves(color) {
    const moves = [];
    const isWhite = color === 'white';
    
    for (let row = 0; row < 8; row++) {
        for (let col = 0; col < 8; col++) {
            const piece = gameState.board[row][col];
            if (piece && (piece === piece.toUpperCase()) === isWhite) {
                const pieceMoves = getPossibleMoves(row, col);
                pieceMoves.forEach(([toRow, toCol]) => {
                    moves.push([row, col, toRow, toCol]);
                });
            }
        }
    }
    
    return moves;
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ö–æ–¥
function getRandomSafeMove(moves) {
    const safeMoves = moves.filter(move => {
        const [fromRow, fromCol, toRow, toCol] = move;
        const piece = gameState.board[fromRow][fromCol];
        const targetPiece = gameState.board[toRow][toCol];
        
        // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–µ–¥—É—Ç –∫ –ø–æ—Ç–µ—Ä–µ —Ñ–∏–≥—É—Ä—ã
        return !targetPiece || getPieceValue(targetPiece) >= getPieceValue(piece);
    });
    
    return safeMoves.length > 0 ? 
        safeMoves[Math.floor(Math.random() * safeMoves.length)] : 
        moves[Math.floor(Math.random() * moves.length)];
}

// –ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ —Å –≤–∑—è—Ç–∏–µ–º
function getCaptureMove(moves) {
    const captureMoves = moves.filter(move => {
        const [fromRow, fromCol, toRow, toCol] = move;
        return gameState.board[toRow][toCol] !== '';
    });
    
    if (captureMoves.length > 0) {
        // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –≤–∑—è—Ç–∏–µ
        return captureMoves.reduce((best, current) => {
            const [, , toRow, toCol] = current;
            const [, , bestToRow, bestToCol] = best;
            const currentValue = getPieceValue(gameState.board[toRow][toCol]);
            const bestValue = getPieceValue(gameState.board[bestToRow][bestToCol]);
            return currentValue > bestValue ? current : best;
        });
    }
    
    return null;
}

// –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ö–æ–¥ –ø–æ –æ—Ü–µ–Ω–∫–µ –ø–æ–∑–∏—Ü–∏–∏
function getBestMoveByEvaluation(moves, depth) {
    let bestMove = null;
    let bestScore = -Infinity;
    
    moves.forEach(move => {
        const score = evaluateMove(move, depth);
        if (score > bestScore) {
            bestScore = score;
            bestMove = move;
        }
    });
    
    return bestMove || moves[Math.floor(Math.random() * moves.length)];
}

// –û—Ü–µ–Ω–∏—Ç—å —Ö–æ–¥
function evaluateMove(move, depth) {
    const [fromRow, fromCol, toRow, toCol] = move;
    const piece = gameState.board[fromRow][fromCol];
    const targetPiece = gameState.board[toRow][toCol];
    
    let score = 0;
    
    // –ë–∞–∑–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
    if (targetPiece) {
        score += getPieceValue(targetPiece) * 10; // –í–∑—è—Ç–∏–µ
    }
    
    score += getPieceValue(piece); // –¶–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∏–≥—É—Ä—ã
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
    score += getPositionalBonus(toRow, toCol, piece);
    
    // –ü—Ä–æ—Å—Ç–∞—è –º–∏–Ω–∏-–º–∞–∫—Å –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
    if (depth > 1) {
        // –°–∏–º—É–ª—è—Ü–∏—è —Ö–æ–¥–∞
        const originalPiece = gameState.board[toRow][toCol];
        gameState.board[toRow][toCol] = piece;
        gameState.board[fromRow][fromCol] = '';
        
        // –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
        const playerMoves = getAllPossibleMoves('white');
        let minPlayerScore = Infinity;
        
        playerMoves.forEach(playerMove => {
            const playerScore = evaluateMove(playerMove, depth - 1);
            minPlayerScore = Math.min(minPlayerScore, playerScore);
        });
        
        score -= minPlayerScore * 0.5;
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        gameState.board[fromRow][fromCol] = piece;
        gameState.board[toRow][toCol] = originalPiece;
    }
    
    return score;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∏–≥—É—Ä—ã
function getPieceValue(piece) {
    const values = {
        'p': 1, 'n': 3, 'b': 3, 'r': 5, 'q': 9, 'k': 100,
        'P': 1, 'N': 3, 'B': 3, 'R': 5, 'Q': 9, 'K': 100
    };
    return values[piece] || 0;
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å
function getPositionalBonus(row, col, piece) {
    // –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    const centerBonus = (row >= 3 && row <= 4 && col >= 3 && col <= 4) ? 1 : 0;
    const pieceType = piece.toLowerCase();
    
    switch (pieceType) {
        case 'p': // –ü–µ—à–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
            return centerBonus;
        case 'n': // –ö–æ–Ω–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
            return centerBonus * 2;
        case 'b': // –°–ª–æ–Ω—ã –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º
            return centerBonus;
        case 'r': // –õ–∞–¥—å–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ª–∏–Ω–∏—è—Ö
            return 0;
        case 'q': // –§–µ—Ä–∑—å –≤ —Ü–µ–Ω—Ç—Ä–µ
            return centerBonus;
        case 'k': // –ö–æ—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return 0;
        default:
            return 0;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
function checkGameOver() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–∞ –∏ –ø–∞—Ç–∞
    const whiteMoves = getAllPossibleMoves('white');
    const blackMoves = getAllPossibleMoves('black');
    
    if (whiteMoves.length === 0) {
        gameState.gameOver = true;
        gameState.winner = 'black';
        return true;
    }
    
    if (blackMoves.length === 0) {
        gameState.gameOver = true;
        gameState.winner = 'white';
        return true;
    }
    
    return false;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
function showGameOver() {
    const resultElement = document.getElementById('gameResult');
    const resultTextElement = document.getElementById('gameResultText');
    
    if (gameState.winner === 'white') {
        resultElement.textContent = 'üéâ –ü–æ–±–µ–¥–∞!';
        resultTextElement.textContent = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
    } else {
        resultElement.textContent = 'üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ';
        resultTextElement.textContent = 'AI –≤—ã–∏–≥—Ä–∞–ª!';
    }
    
    showScreen('gameOverScreen');
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
function updateGameInfo() {
    const currentPlayerElement = document.getElementById('currentPlayer');
    const difficultyElement = document.getElementById('difficultyLevel');
    
    if (currentPlayerElement) {
        currentPlayerElement.textContent = gameState.currentPlayer === 'white' ? '–í–∞—à —Ö–æ–¥' : '–•–æ–¥ AI';
    }
    
    if (difficultyElement) {
        difficultyElement.textContent = `–£—Ä–æ–≤–µ–Ω—å: ${currentDifficulty}`;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å GEMINI –£–ú–ù–£–Æ –ø–æ–¥—Å–∫–∞–∑–∫—É
async function showHint() {
    if (gameState.currentPlayer !== 'white' || gameState.gameOver) {
        return;
    }
    
    try {
        let bestMove = null;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini AI –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (geminiAI) {
            console.log('üí° –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç Gemini AI...');
            bestMove = await geminiAI.getSmartHint(gameState.board, currentDifficulty, true);
            console.log('üéØ Gemini AI –ø–æ–¥—Å–∫–∞–∑–∞–ª —Ö–æ–¥:', bestMove);
        }
        
        // –ï—Å–ª–∏ Gemini –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        if (!bestMove) {
            console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤');
            const moves = getAllPossibleMoves('white');
            if (moves.length > 0) {
                bestMove = getSuperBestMoveForWhite(moves);
            }
        }
        
        if (bestMove) {
            const [fromRow, fromCol, toRow, toCol] = bestMove;
            
            // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ö–æ–¥
            const fromSquare = document.querySelector(`[data-row="${fromRow}"][data-col="${fromCol}"]`);
            const toSquare = document.querySelector(`[data-row="${toRow}"][data-col="${toCol}"]`);
            
            if (fromSquare && toSquare) {
                fromSquare.style.background = 'rgba(255, 193, 7, 0.8)';
                toSquare.style.background = 'rgba(255, 193, 7, 0.8)';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –°–£–ü–ï–† –∞–Ω–∏–º–∞—Ü–∏—é
                fromSquare.style.boxShadow = '0 0 15px rgba(255, 193, 7, 1)';
                toSquare.style.boxShadow = '0 0 15px rgba(255, 193, 7, 1)';
                fromSquare.style.border = '2px solid #ffc107';
                toSquare.style.border = '2px solid #ffc107';
                
                setTimeout(() => {
                    fromSquare.style.background = '';
                    toSquare.style.background = '';
                    fromSquare.style.boxShadow = '';
                    toSquare.style.boxShadow = '';
                    fromSquare.style.border = '';
                    toSquare.style.border = '';
                }, 4000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Gemini –ø–æ–¥—Å–∫–∞–∑–∫–∏:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        const moves = getAllPossibleMoves('white');
        if (moves.length > 0) {
            const bestMove = getSuperBestMoveForWhite(moves);
            if (bestMove) {
                const [fromRow, fromCol, toRow, toCol] = bestMove;
                const fromSquare = document.querySelector(`[data-row="${fromRow}"][data-col="${fromCol}"]`);
                const toSquare = document.querySelector(`[data-row="${toRow}"][data-col="${toCol}"]`);
                
                if (fromSquare && toSquare) {
                    fromSquare.style.background = 'rgba(255, 193, 7, 0.8)';
                    toSquare.style.background = 'rgba(255, 193, 7, 0.8)';
                    
                    setTimeout(() => {
                        fromSquare.style.background = '';
                        toSquare.style.background = '';
                    }, 3000);
                }
            }
        }
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ö–æ–¥ –¥–ª—è –±–µ–ª—ã—Ö
function getBestMoveForWhite(moves) {
    if (moves.length === 0) return null;
    
    const priorities = [];
    
    for (const move of moves) {
        let score = 0;
        const [fromRow, fromCol, toRow, toCol] = move;
        const piece = gameState.board[fromRow][fromCol];
        const targetPiece = gameState.board[toRow][toCol];
        
        // 1. –í–∑—è—Ç–∏–µ —Ñ–∏–≥—É—Ä
        if (targetPiece) {
            score += getPieceValue(targetPiece) * 100;
        }
        
        // 2. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if ((toRow >= 3 && toRow <= 4) && (toCol >= 3 && toCol <= 4)) {
            score += 20;
        }
        
        // 3. –†–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–≥—É—Ä
        if (piece === 'N' && toRow <= 5) { // –ö–æ–Ω—å –≤–ø–µ—Ä–µ–¥
            score += 15;
        }
        if (piece === 'B' && toRow <= 5) { // –°–ª–æ–Ω –≤–ø–µ—Ä–µ–¥
            score += 10;
        }
        
        // 4. –†–æ–∫–∏—Ä–æ–≤–∫–∞
        if (piece === 'K' && Math.abs(toCol - fromCol) === 2) {
            score += 30;
        }
        
        // 5. –ê—Ç–∞–∫–∞ –Ω–∞ –∫–æ—Ä–æ–ª—è
        if (targetPiece === 'k') {
            score += 1000;
        }
        
        // 6. –ó–∞—â–∏—Ç–∞ —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä
        if (isPieceUnderAttack(toRow, toCol, 'white')) {
            score += 50;
        }
        
        priorities.push({ move, score });
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    priorities.sort((a, b) => b.score - a.score);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π —Ö–æ–¥
    return priorities[0].move;
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Telegram (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
function sendDataToTelegram(data) {
    if (tg) {
        tg.sendData(JSON.stringify(data));
    }
}

